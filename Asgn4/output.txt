

function_specifier => inline
type_specifier => void
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => function_specifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = foo1)type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
type_qualifier => restrict
type_qualifier_list => type_qualifier
type_qualifier_list_opt => type_qualifier_list
pointer => * type_qualifier_list_opt
pointer_opt => pointer
direct_declarator => IDENTIFIER	
(IDENTIFIER = p1)declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_declaration
type_qualifier => const
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => type_qualifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = p2)declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_list , parameter_declaration
type_qualifier => volatile
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => type_qualifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = p3)declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_list , parameter_declaration
parameter_type_list => parameter_list , ...
direct_declarator => direct_declarator ( parameter_type_list )
declarator => pointer_opt direct_declarator
declaration_list_opt => epsilon

storage_class_specifier => auto
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => storage_class_specifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = a)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item

storage_class_specifier => register
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => storage_class_specifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = b)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

storage_class_specifier => extern
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => storage_class_specifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = c)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

storage_class_specifier => static
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => storage_class_specifier declaration_specifiers_opt
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = d)declarator => pointer_opt direct_declarator
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration => function_definition
translation_unit => external_declaration


type_qualifier => const
type_specifier => char
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => type_qualifier declaration_specifiers_opt
type_qualifier_list_opt => epsilon
pointer => * type_qualifier_list_opt
pointer_opt => pointer
direct_declarator => IDENTIFIER	
(IDENTIFIER = foo2)type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = b)type_qualifier => const
type_qualifier_list => type_qualifier
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 8
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
direct_declarator =>  direct_declarator [ type_qualifier_list static assignment_expression ]
declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_declaration
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = c)type_qualifier_list_opt => epsilon
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 9
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
direct_declarator => direct_declarator [ static type_qualifier_list_opt assignment_expression ]
declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_list , parameter_declaration
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = d)type_qualifier_list_opt => epsilon
assignment_expression_opt => epsilon
direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_list , parameter_declaration
type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = e)type_qualifier => const
type_qualifier_list => type_qualifier
type_qualifier_list_opt => type_qualifier_list
direct_declarator => direct_declarator [ type_qualifier_list_opt * ]
declarator => pointer_opt direct_declarator
parameter_declaration => declaration_specifiers declarator
parameter_list => parameter_list , parameter_declaration
parameter_type_list => parameter_list
direct_declarator => direct_declarator ( parameter_type_list )
declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
external_declaration => declaration
translation_unit => translation_unit external_declaration


enum_specifier => enum IDENTIFIER	
(IDENTIFIER = e1)type_specifier => enum_specifier
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
init_declarator_list_opt => epsilon
declaration => declaration_specifiers init_declarator_list_opt ;
external_declaration => declaration
translation_unit => translation_unit external_declaration

identifier_opt => IDENTIFIER	
(IDENTIFIER = e2)enumerator => IDENTIFIER	
(IDENTIFIER = TAG1)enumerator_list => enumerator
enumerator => IDENTIFIER	
(IDENTIFIER = TAG2)enumerator_list => enumerator_list , enumerator
enum_specifier => enum identifier_opt { enumerator_list }
type_specifier => enum_specifier
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
init_declarator_list_opt => epsilon
declaration => declaration_specifiers init_declarator_list_opt ;
external_declaration => declaration
translation_unit => translation_unit external_declaration

identifier_opt => epsilon
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
constant_expression => conditional_expression
enumerator => IDENTIFIER = constant_expression	
(IDENTIFIER = TAG3)enumerator_list => enumerator
enumerator => IDENTIFIER	
(IDENTIFIER = TAG4)enumerator_list => enumerator_list , enumerator
enum_specifier => enum identifier_opt { enumerator_list }
type_specifier => enum_specifier
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = e3)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
external_declaration => declaration
translation_unit => translation_unit external_declaration


type_specifier => signed
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = main)identifier_list_opt => epslion
direct_declarator => direct_declarator ( identifier_list_opt )
declarator => pointer_opt direct_declarator
declaration_list_opt => epsilon

type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = a)type_qualifier_list_opt => epsilon
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 6
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression_opt => assignment_expression
direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator => pointer_opt direct_declarator
designation_opt => epsilon
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
initializer_list => designation_opt initializer
designation_opt => epsilon
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
initializer_list => initializer_list , designation_opt initializer
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
constant_expression => conditional_expression
designator => [ constant_expression ]
designator_list => designator
designation => designator_list =
designation_opt => designation
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
initializer_list => initializer_list , designation_opt initializer
initializer => { initializer_list }
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item

type_specifier => char
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = b)type_qualifier_list_opt => epsilon
assignment_expression_opt => epsilon
direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator => pointer_opt direct_declarator
primary_expression => STRING_LITERAL	
(STRING_LITERAL = "Test string :)")postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => char
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = c1)declarator => pointer_opt direct_declarator
primary_expression => CHAR_CONSTANT	
(CHAR_CONSTANT = 'c')postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => char
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
type_qualifier_list_opt => epsilon
pointer => * type_qualifier_list_opt
pointer_opt => pointer
direct_declarator => IDENTIFIER	
(IDENTIFIER = c2)declarator => pointer_opt direct_declarator
unary_operator => &
primary_expression => IDENTIFIER	
(IDENTIFIER = c1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
unary_expression => unary_operator cast_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

unary_operator => *
primary_expression => IDENTIFIER	
(IDENTIFIER = c2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
unary_expression => unary_operator cast_expression
assignment_operator => =
primary_expression => CHAR_CONSTANT	
(CHAR_CONSTANT = 'a')postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

type_specifier => char
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
type_qualifier_list_opt => epsilon
type_qualifier_list_opt => epsilon
pointer => * type_qualifier_list_opt
pointer => * type_qualifier_list_opt pointer
pointer_opt => pointer
direct_declarator => IDENTIFIER	
(IDENTIFIER = d)declarator => pointer_opt direct_declarator
type_specifier => char
specifier_qualifier_list_opt => epsilon
specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
typename => specifier_qualifier_list
designation_opt => epsilon
primary_expression => STRING_LITERAL	
(STRING_LITERAL = "a")postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
initializer_list => designation_opt initializer
designation_opt => epsilon
primary_expression => IDENTIFIER	
(IDENTIFIER = b
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
initializer_list => initializer_list , designation_opt initializer
designation_opt => epsilon
primary_expression => STRING_LITERAL	
(STRING_LITERAL = "abc")postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
initializer_list => initializer_list , designation_opt initializer
postfix_expression => ( typename ) { initializer_list }
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item


type_specifier => unsigned
type_specifier => long
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n1)declarator => pointer_opt direct_declarator
unary_operator => +
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 123456789
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
unary_expression => unary_operator cast_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => short
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n2)declarator => pointer_opt direct_declarator
unary_operator => ~
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 16
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
unary_expression => unary_operator cast_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => float
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n3)declarator => pointer_opt direct_declarator
unary_operator => -
primary_expression => FLOAT_CONSTANT	
(FLOAT_CONSTANT = 3.530000
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
unary_expression => unary_operator cast_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => double
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n4)declarator => pointer_opt direct_declarator
primary_expression => FLOAT_CONSTANT	
(FLOAT_CONSTANT = 0.029900
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => _Bool
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n5)declarator => pointer_opt direct_declarator
unary_operator => !
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
unary_expression => unary_operator cast_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => double
type_specifier => _Complex
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n6)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item

type_specifier => double
type_specifier => _Imaginary
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
declaration_specifiers_opt => declaration_specifiers
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = n7)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
type_specifier => int
specifier_qualifier_list_opt => epsilon
specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
typename => specifier_qualifier_list
primary_expression => IDENTIFIER	
(IDENTIFIER = c
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
cast_expression => ( typename ) cast_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
type_specifier => int
specifier_qualifier_list_opt => epsilon
specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
typename => specifier_qualifier_list
unary_expression => sizeof ( typename )
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
unary_expression => sizeof unary_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => *=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => /=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => expression , assignment_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => %=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => expression , assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => +=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => -=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
primary_expression => ( expression )
postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => <<=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => >>=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
primary_expression => ( expression )
postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => &=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => |=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => ^=
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
assignment_expression => unary_expression assignment_operator assignment_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => equality_expression == relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => equality_expression == relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_OR_expression || logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
primary_expression => ( expression )
postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => equality_expression != relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => logical_AND_expression && inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
primary_expression => ( expression )
postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
conditional_expression => logical_OR_expression ? expression : conditional_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = a
)postfix_expression => primary_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
postfix_expression => postfix_expression [ expression ]
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item



primary_expression => IDENTIFIER	
(IDENTIFIER = n3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => relational_expression < shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression


primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression

primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
constant_expression => conditional_expression

primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
postfix_expression => postfix_expression ++
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
labeled_statement => case constant_expression : statement
statement => labeled_statement
block_item => statement
block_item_list => block_item

jump_statement => break ;
statement => jump_statement
block_item => statement
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
postfix_expression => postfix_expression --
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
labeled_statement => default : statement
statement => labeled_statement
block_item => statement
block_item_list => block_item_list block_item

block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
statement => compound_statement
selection_statement => switch ( expression ) statement
statement => selection_statement
block_item => statement
block_item_list => block_item


block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
statement => compound_statement
primary_expression => IDENTIFIER	
(IDENTIFIER = n3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => relational_expression > shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression

primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => relational_expression >= shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression

primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
postfix_expression => postfix_expression ++
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement

selection_statement => if ( expression ) statement
statement => selection_statement
block_item => statement
block_item_list => block_item
block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
statement => compound_statement

primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = n1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => relational_expression <= shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression

primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
postfix_expression => postfix_expression ++
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement

selection_statement => if ( expression ) statement
statement => selection_statement
block_item => statement
block_item_list => block_item
block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
statement => compound_statement
selection_statement => if ( expression ) statement else statement
statement => selection_statement
selection_statement => if ( expression ) statement else statement
statement => selection_statement
labeled_statement => IDENTIFIER : statement	
(IDENTIFIER = RANDOM_LOC)statement => labeled_statement
block_item => statement
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
postfix_expression => postfix_expression --
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression

jump_statement => goto IDENTIFIER ;	
(IDENTIFIER = RANDOM_LOC)statement => jump_statement
iteration_statement => while ( expression ) statement
statement => iteration_statement
block_item => statement
block_item_list => block_item_list block_item


expression_opt => epsilon
expression_opt => epsilon
expression_opt => epsilon

type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = i)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
expression_opt => epsilon
expression_opt => epsilon

type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = i)declarator => pointer_opt direct_declarator
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = j)declarator => pointer_opt direct_declarator
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
initializer => assignment_expression
init_declarator => declarator = initializer
init_declarator_list => init_declarator_list , init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
primary_expression => IDENTIFIER	
(IDENTIFIER = i
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = j
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => equality_expression != relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
primary_expression => IDENTIFIER	
(IDENTIFIER = i
)postfix_expression => primary_expression
postfix_expression => postfix_expression ++
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression

primary_expression => IDENTIFIER	
(IDENTIFIER = j
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => equality_expression == relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression

jump_statement => continue ;
statement => jump_statement

selection_statement => if ( expression ) statement
statement => selection_statement
block_item => statement
block_item_list => block_item
block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
statement => compound_statement
iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
statement => iteration_statement
iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
statement => iteration_statement
iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
statement => iteration_statement
block_item => statement
block_item_list => block_item_list block_item



primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
postfix_expression => postfix_expression ++
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item

block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
statement => compound_statement
primary_expression => IDENTIFIER	
(IDENTIFIER = n2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => relational_expression < shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
iteration_statement => do statement while ( expression ) ;
statement => iteration_statement
block_item => statement
block_item_list => block_item_list block_item


type_specifier => int
declaration_specifiers_opt => epsilon
declaration_specifiers => type_specifier declaration_specifiers_opt 
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = t1)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = t2)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator_list , init_declarator
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = t3)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator_list , init_declarator
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = t4)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator_list , init_declarator
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = t5)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator_list , init_declarator
pointer_opt => epsilon
direct_declarator => IDENTIFIER	
(IDENTIFIER = t6)declarator => pointer_opt direct_declarator
init_declarator => declarator
init_declarator_list => init_declarator_list , init_declarator
init_declarator_list_opt => init_declarator_list
declaration => declaration_specifiers init_declarator_list_opt ;
block_item => declaration
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = t1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = t1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => additive_expression + multiplicative_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => multiplicative_expression / cast_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t5
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => multiplicative_expression * cast_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t6
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => multiplicative_expression % cast_expression
additive_expression => additive_expression - multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = t2
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = t2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => shift_expression << additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = t2
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = t2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => shift_expression >> additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = t1
)postfix_expression => primary_expression
unary_expression => postfix_expression
assignment_operator => =
primary_expression => IDENTIFIER	
(IDENTIFIER = t2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => AND_expression & equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
primary_expression => IDENTIFIER	
(IDENTIFIER = t5
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => exclusive_OR_expression ^ AND_expression
inclusive_OR_expression => inclusive_OR_expression | exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item


primary_expression => IDENTIFIER	
(IDENTIFIER = foo1
)postfix_expression => primary_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 1
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
argument_expression_list => assignment_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 2
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
argument_expression_list => argument_expression_list , assignment_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
argument_expression_list => argument_expression_list , assignment_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
argument_expression_list => argument_expression_list , assignment_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 5
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
argument_expression_list => argument_expression_list , assignment_expression
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 6
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
argument_expression_list => argument_expression_list , assignment_expression
argument_expression_list_opt => argument_expression_list
postfix_expression => postfix_expression ( argument_expression_list_opt )
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item



primary_expression => IDENTIFIER	
(IDENTIFIER = ms1
)postfix_expression => primary_expression
postfix_expression => postfix_expression . IDENTIFIER	
(IDENTIFIER = a)unary_expression => postfix_expression
assignment_operator => =
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 3
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item

primary_expression => IDENTIFIER	
(IDENTIFIER = ms2
)postfix_expression => primary_expression
postfix_expression => postfix_expression -> IDENTIFIER	
(IDENTIFIER = a)unary_expression => postfix_expression
assignment_operator => =
primary_expression => INT_CONSTANT	
(INT_CONSTANT = 4
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
assignment_expression => unary_expression assignment_operator assignment_expression
expression => assignment_expression
expression_opt => expression
expression_statement => expression_opt ;
statement => expression_statement
block_item => statement
block_item_list => block_item_list block_item


primary_expression => INT_CONSTANT	
(INT_CONSTANT = 0
)postfix_expression => primary_expression
unary_expression => postfix_expression
cast_expression => unary_expression
multiplicative_expression => cast_expression
additive_expression => multiplicative_expression
shift_expression => additive_expression
relational_expression => shift_expression
equality_expression => relational_expression
AND_expression => equality_expression
exclusive_OR_expression => AND_expression
inclusive_OR_expression => exclusive_OR_expression
logical_AND_expression => inclusive_OR_expression
logical_OR_expression => logical_AND_expression
conditional_expression => logical_OR_expression
assignment_expression => conditional_expression
expression => assignment_expression
expression_opt => expression
jump_statement => return expression_opt ;
statement => jump_statement
block_item => statement
block_item_list => block_item_list block_item

block_item_list_opt => block_item_list
compound_statement => { block_item_list_opt }
function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration => function_definition
translation_unit => translation_unit external_declaration
